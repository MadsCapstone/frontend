name: REACT APP - Pipeline (Build,Deploy,Service)

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
  CLUSTER_NAME: ${{ secrets.PROD_CLUSTER_NAME_V2 }}
  IMAGE_REACT: frontend
#  IMAGE_NAME: gcr.io/$PROJECT_ID/$CLUSTER_NAME-$IMAGE

jobs:
  FRONTEND-PIPELINE:
    name: REACT FRONTEND Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          project_id: ${{ secrets.GCE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Setup kubeconfig to point to cluster
      - name: Kubeconfig setup
        run: |-
          gcloud container clusters get-credentials --zone $CLUSTER_ZONE $CLUSTER_NAME

      # Build docker image for flask
      # Build the Docker image
      - name: Build React Image
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$CLUSTER_NAME-$IMAGE_REACT" .

      # Push to container registry in gcp
      - name: Publish React Image to Container Registry
        run: |-
          docker push "gcr.io/$PROJECT_ID/$CLUSTER_NAME-$IMAGE_REACT"

      # Kubernetes Deployment of the pods for flask_app to run specs located in yaml file
      - name: Deploy React to Cluster
        run: |-
          kubectl apply -f ./kubefiles/react-app-deploy.yaml

      # Kubernetes creation of the Service for flask_app
      - name: Create React Service
        run: |-
          kubectl apply -f ./kubefiles/react-app-service.yaml

      # Perform rolling update
      - name: Rolling Update
        run: |-
          kubectl rollout restart deployment frontend